{"ast":null,"code":"import { connect, Contract, keyStores, WalletConnection } from 'near-api-js';\nimport getConfig from './config';\nconst nearConfig = getConfig(\"development\" || 'development'); // Initialize contract & set global variables\n\nexport async function initContract() {\n  // Initialize connection to the NEAR testnet\n  const near = await connect(Object.assign({\n    deps: {\n      keyStore: new keyStores.BrowserLocalStorageKeyStore()\n    }\n  }, nearConfig)); // Initializing Wallet based Account. It can work with NEAR testnet wallet that\n  // is hosted at https://wallet.testnet.near.org\n\n  window.walletConnection = new WalletConnection(near); // Getting the Account ID. If still unauthorized, it's just empty string\n\n  window.accountId = window.walletConnection.getAccountId(); // Initializing our contract APIs by contract name and configuration\n\n  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {\n    // View methods are read only. They don't modify the state, but usually return some value.\n    viewMethods: ['getGreeting'],\n    // Change methods can modify the state. But you don't receive the returned value when called.\n    changeMethods: ['setGreeting']\n  });\n}\nexport function logout() {\n  window.walletConnection.signOut(); // reload page\n\n  window.location.replace(window.location.origin + window.location.pathname);\n}\nexport function login() {\n  // Allow the current app to make calls to the specified contract on the\n  // user's behalf.\n  // This works by creating a new access key for the user's account and storing\n  // the private key in localStorage.\n  window.walletConnection.requestSignIn(nearConfig.contractName);\n}","map":{"version":3,"sources":["/Users/Apollo/workspace/Anechoic/project3/echo-app/src/utils.js"],"names":["connect","Contract","keyStores","WalletConnection","getConfig","nearConfig","initContract","near","Object","assign","deps","keyStore","BrowserLocalStorageKeyStore","window","walletConnection","accountId","getAccountId","contract","account","contractName","viewMethods","changeMethods","logout","signOut","location","replace","origin","pathname","login","requestSignIn"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,QAAlB,EAA4BC,SAA5B,EAAuCC,gBAAvC,QAA+D,aAA/D;AACA,OAAOC,SAAP,MAAsB,UAAtB;AAEA,MAAMC,UAAU,GAAGD,SAAS,CAAC,iBAAwB,aAAzB,CAA5B,C,CAEA;;AACA,OAAO,eAAeE,YAAf,GAA8B;AACnC;AACA,QAAMC,IAAI,GAAG,MAAMP,OAAO,CAACQ,MAAM,CAACC,MAAP,CAAc;AAAEC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,QAAQ,EAAE,IAAIT,SAAS,CAACU,2BAAd;AAAZ;AAAR,GAAd,EAAmFP,UAAnF,CAAD,CAA1B,CAFmC,CAInC;AACA;;AACAQ,EAAAA,MAAM,CAACC,gBAAP,GAA0B,IAAIX,gBAAJ,CAAqBI,IAArB,CAA1B,CANmC,CAQnC;;AACAM,EAAAA,MAAM,CAACE,SAAP,GAAmBF,MAAM,CAACC,gBAAP,CAAwBE,YAAxB,EAAnB,CATmC,CAWnC;;AACAH,EAAAA,MAAM,CAACI,QAAP,GAAkB,MAAM,IAAIhB,QAAJ,CAAaY,MAAM,CAACC,gBAAP,CAAwBI,OAAxB,EAAb,EAAgDb,UAAU,CAACc,YAA3D,EAAyE;AAC/F;AACAC,IAAAA,WAAW,EAAE,CAAC,aAAD,CAFkF;AAG/F;AACAC,IAAAA,aAAa,EAAE,CAAC,aAAD;AAJgF,GAAzE,CAAxB;AAMD;AAED,OAAO,SAASC,MAAT,GAAkB;AACvBT,EAAAA,MAAM,CAACC,gBAAP,CAAwBS,OAAxB,GADuB,CAEvB;;AACAV,EAAAA,MAAM,CAACW,QAAP,CAAgBC,OAAhB,CAAwBZ,MAAM,CAACW,QAAP,CAAgBE,MAAhB,GAAyBb,MAAM,CAACW,QAAP,CAAgBG,QAAjE;AACD;AAED,OAAO,SAASC,KAAT,GAAiB;AACtB;AACA;AACA;AACA;AACAf,EAAAA,MAAM,CAACC,gBAAP,CAAwBe,aAAxB,CAAsCxB,UAAU,CAACc,YAAjD;AACD","sourcesContent":["import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'\nimport getConfig from './config'\n\nconst nearConfig = getConfig(process.env.NODE_ENV || 'development')\n\n// Initialize contract & set global variables\nexport async function initContract() {\n  // Initialize connection to the NEAR testnet\n  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))\n\n  // Initializing Wallet based Account. It can work with NEAR testnet wallet that\n  // is hosted at https://wallet.testnet.near.org\n  window.walletConnection = new WalletConnection(near)\n\n  // Getting the Account ID. If still unauthorized, it's just empty string\n  window.accountId = window.walletConnection.getAccountId()\n\n  // Initializing our contract APIs by contract name and configuration\n  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {\n    // View methods are read only. They don't modify the state, but usually return some value.\n    viewMethods: ['getGreeting'],\n    // Change methods can modify the state. But you don't receive the returned value when called.\n    changeMethods: ['setGreeting'],\n  })\n}\n\nexport function logout() {\n  window.walletConnection.signOut()\n  // reload page\n  window.location.replace(window.location.origin + window.location.pathname)\n}\n\nexport function login() {\n  // Allow the current app to make calls to the specified contract on the\n  // user's behalf.\n  // This works by creating a new access key for the user's account and storing\n  // the private key in localStorage.\n  window.walletConnection.requestSignIn(nearConfig.contractName)\n}\n"]},"metadata":{},"sourceType":"module"}